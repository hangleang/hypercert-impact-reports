import { GoogleSpreadsheet } from "google-spreadsheet";
import { JWT } from "google-auth-library";
import { ethers, Contract } from "ethers";

import { DEPLOYMENTS, SPREADSHEET_ID } from "./constants.js";
import * as dotenv from "dotenv";
import { NFTStorage } from "nft.storage";
import HypercertMinterABI from "../abi/HypercertMinter.json" assert { type: "json" };
import { SupportedChainIds } from "./types.js";
// import { HypercertClient } from "@hypercerts-org/sdk";
dotenv.config();

// Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
const serviceAccountAuth = new JWT({
  // env var values here are copied from service account credentials generated by google
  // see "Authentication" section in docs for more info
  email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
  key: process.env.GOOGLE_PRIVATE_KEY,
  scopes: ["https://www.googleapis.com/auth/spreadsheets"],
});

export const spreadsheet = new GoogleSpreadsheet(
  SPREADSHEET_ID,
  serviceAccountAuth
);

// NOTE: you should replace this with your own JSON-RPC provider to the network
// This should have signing abilities and match the `chainId` passed into HypercertClient
export const rpcURL = process.env.RPC_URL || "";
export const provider = new ethers.providers.JsonRpcBatchProvider(rpcURL);

const privateKey = process.env.PRIVATE_KEY || "";
export const signer = new ethers.Wallet(privateKey, provider);
export let operator: ethers.providers.Provider | ethers.Signer;
if (privateKey) {
  operator = signer;
} else {
  operator = provider;
}

export const chainId = (await provider.getNetwork()).chainId;

if ([5, 10].indexOf(chainId) === -1) {
  throw new Error(`chainId=${chainId.toString()} is not yet supported`);
}
export const IHypercertMinter = new ethers.utils.Interface(HypercertMinterABI);

export const hypercertContract = new ethers.Contract(
  DEPLOYMENTS[chainId as SupportedChainIds].contractAddress,
  HypercertMinterABI,
  operator
);

const nftStorageToken = process.env.NFT_STORAGE_API || "";
export const nftStorageClient: NFTStorage = new NFTStorage({
  token: nftStorageToken,
});

// export const client = new HypercertClient({
//   chainId: 5,
//   operator,
//   nftStorageToken: process.env.NFT_STORAGE_API,
//   web3StorageToken: process.env.WEB3_STORAGE_API,
// });
