import { GoogleSpreadsheet } from "google-spreadsheet";
import { JWT } from "google-auth-library";
import { ethers } from "ethers";

import { DEPLOYMENTS, SPREADSHEET_ID, SupportedChainIds } from "./constants.js";
import * as dotenv from "dotenv";
import { HypercertMinter, HypercertMinterABI } from "@hypercerts-org/contracts";
import { NFTStorage } from "nft.storage";
// import { HypercertClient } from "@hypercerts-org/sdk";
dotenv.config();

// Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
const serviceAccountAuth = new JWT({
  // env var values here are copied from service account credentials generated by google
  // see "Authentication" section in docs for more info
  email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
  key: process.env.GOOGLE_PRIVATE_KEY,
  scopes: ["https://www.googleapis.com/auth/spreadsheets"],
});

export const spreadsheet = new GoogleSpreadsheet(
  SPREADSHEET_ID,
  serviceAccountAuth
);

// NOTE: you should replace this with your own JSON-RPC provider to the network
// This should have signing abilities and match the `chainId` passed into HypercertClient
export const provider = new ethers.providers.AlchemyProvider(
  "goerli",
  process.env.ALCHEMY_API
);

const privateKey = process.env.PRIVATE_KEY;
export let operator: ethers.providers.Provider | ethers.Signer;
if (privateKey) {
  operator = new ethers.Wallet(privateKey, provider);
} else {
  operator = provider;
}

export const chainId = async () => (await provider.getNetwork()).chainId;

export const hypercertContract = async (): Promise<HypercertMinter> => {
  const _chainId = await chainId();
  if (!_chainId || [5, 10].indexOf(_chainId) === -1) {
    throw new Error(`chainId=${_chainId.toString()} is not yet supported`);
  }

  return new ethers.Contract(
    DEPLOYMENTS[_chainId as SupportedChainIds].contractAddress,
    HypercertMinterABI,
    operator
  ) as HypercertMinter;
};

const nftStorageToken = process.env.NFT_STORAGE_API || "";
export const nftStorageClient: NFTStorage = new NFTStorage({
  token: nftStorageToken,
});
// export const client = new HypercertClient({
//   chainId: 5,
//   operator,
//   nftStorageToken: process.env.NFT_STORAGE_API,
//   web3StorageToken: process.env.WEB3_STORAGE_API,
// });

export const getClient = () =>
  import("@hypercerts-org/sdk").then(
    ({ HypercertClient }) =>
      new HypercertClient({
        chainId: 5,
        operator,
        nftStorageToken,
        web3StorageToken: process.env.WEB3_STORAGE_API,
      })
  );
