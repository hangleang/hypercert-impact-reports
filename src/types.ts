import { BigNumberish, ethers } from "ethers";

export type SupportedChainIds = 5 | 10;
export type Deployment = {
  /** The ID of the network on which the contract is deployed. */
  chainId: number;
  /** The name of the network on which the contract is deployed. */
  chainName: string;
  /** The address of the deployed contract. */
  contractAddress: string;
  /** The url to the subgraph that indexes the contract events. Override for localized testing */
  graphUrl: string;
};

/**
 * Properties of an impact claim
 */
interface HypercertClaimdata$1 {
  /**
   * Scopes of impact
   */
  impact_scope: {
    name?: string;
    value?: string[];
    excludes?: string[];
    display_value?: string;
    [k: string]: unknown;
  };
  /**
   * Scopes of work
   */
  work_scope: {
    name?: string;
    value?: string[];
    excludes?: string[];
    display_value?: string;
    [k: string]: unknown;
  };
  /**
   * Work time period. The value is UNIX time in seconds from epoch.
   */
  work_timeframe: {
    name?: string;
    value?: number[];
    display_value?: string;
    [k: string]: unknown;
  };
  /**
   * Impact time period. The value is UNIX time in seconds from epoch.
   */
  impact_timeframe: {
    name?: string;
    value?: number[];
    display_value?: string;
    [k: string]: unknown;
  };
  /**
   * Contributors
   */
  contributors: {
    name?: string;
    value?: string[];
    display_value?: string;
    [k: string]: unknown;
  };
  /**
   * Rights
   */
  rights?: {
    name?: string;
    value?: string[];
    excludes?: string[];
    display_value?: string;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}

declare const TransferRestrictions: {
  readonly AllowAll: 0;
  readonly DisallowAll: 1;
  readonly FromCreatorOnly: 2;
};
type TransferRestrictions =
  (typeof TransferRestrictions)[keyof typeof TransferRestrictions];
type AllowlistEntry = {
  address: string;
  units: BigNumberish;
};

/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Claim data for hypercert. ERC1155 Metadata compliant
 */
export interface HypercertMetadata {
  /**
   * Identifies the asset to which this token represents
   */
  name: string;
  /**
   * Describes the asset to which this token represents
   */
  description: string;
  /**
   * An url pointing to the external website of the project
   */
  external_url?: string;
  /**
   * A URI pointing to a resource with mime type image/* representing the asset to which this token represents. Consider making any images at a width between 320 and 1080 pixels and aspect ratio between 1.91:1 and 4:5 inclusive.
   */
  image: string;
  /**
   * The version of Hypercert schema used to describe this hypercert
   */
  version?: string;
  /**
   * Describes the asset to which this token represents
   */
  ref?: string;
  /**
   * A CID pointer to the merke tree proof json on ipfs
   */
  allowList?: string;
  properties?: {
    trait_type?: string;
    value?: string;
    [k: string]: unknown;
  }[];
  hypercert?: HypercertClaimdata;
}
/**
 * Properties of an impact claim
 */
export interface HypercertClaimdata {
  /**
   * Scopes of impact
   */
  impact_scope: {
    name?: string;
    value?: string[];
    excludes?: string[];
    display_value?: string;
    [k: string]: unknown;
  };
  /**
   * Scopes of work
   */
  work_scope: {
    name?: string;
    value?: string[];
    excludes?: string[];
    display_value?: string;
    [k: string]: unknown;
  };
  /**
   * Work time period. The value is UNIX time in seconds from epoch.
   */
  work_timeframe: {
    name?: string;
    value?: number[];
    display_value?: string;
    [k: string]: unknown;
  };
  /**
   * Impact time period. The value is UNIX time in seconds from epoch.
   */
  impact_timeframe: {
    name?: string;
    value?: number[];
    display_value?: string;
    [k: string]: unknown;
  };
  /**
   * Contributors
   */
  contributors: {
    name?: string;
    value?: string[];
    display_value?: string;
    [k: string]: unknown;
  };
  /**
   * Rights
   */
  rights?: {
    name?: string;
    value?: string[];
    excludes?: string[];
    display_value?: string;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}

type Bool = "Yes" | "No";
export enum Empty {
  NA = "NA",
  no = "no",
  No = "No",
  none = "none",
  NO = "NO",
}

export type VVImpactStoryRowData = {
  impact_uid: string;
  state_name: string;
  full_name: string;
  issue: string;
  impact_cc_verification_call: Bool;
  concerns_about_cc_achieving_impact: string | Bool | Empty;
  impact_corroboration_call: Bool;
  impact_corroboration_details: string | Empty;
  impact_achieved_description: string;
  impact_other_direct_role: string | Empty;
  impact_help_from_other_sources: string | Empty;
  impact_date: string;
  people_involved: number;
  people_impacted: number;
  villages_impacted: number;
  sharing_video_helped_in_impact?: Bool;
  how_did_sharing_video_helped?: string | Empty;
  impact_and_advocacy_team_intervention?: Bool;
  impact_due_to_impact_and_advocacy_team?: string | Bool;
  details_of_impact?: string | Empty;
  impact_facebook_url?: string;
  impact_facebook_publish_date?: string;
  impact_youtube_url?: string;
  impact_youtube_publish_date?: string;
  impact_website_url?: string;
  impact_website_publish_date?: string;
};

export interface ImpactStoryFormattedRowData
  extends Omit<HypercertMetadata, "hypercert"> {
  uid: string;
  youtube_url?: string;
  animation_url?: string;
  work_scope?: string;
  work_timeframe?: string;
  impact_scope?: string;
  impact_timeframe?: string;
  contributors?: string;
  rights?: string;
}
